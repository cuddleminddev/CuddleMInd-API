// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enums
enum SessionType {
  audio
  video
}

enum PaymentType {
  one_time
  plan
}

enum BookingStatus {
  pending
  confirmed
  completed
  cancelled
  missed
}

enum TransactionStatus {
  pending
  success
  failed
}

enum SessionStatusEnum {
  pending
  ongoing
  canceled
  completed
}

enum UserStatus {
  active
  disabled
}

// Tables
model User {
  id                     String                 @id @default(uuid()) @map("id")
  name                   String                 @map("name")
  email                  String                 @unique @map("email")
  phone                  String?                @map("phone")
  status                 UserStatus             @default(active) @map("status")
  roleId                 String                 @map("role_id")
  profile_picture        String?
  createdAt              DateTime               @default(now()) @map("created_at")
  updatedAt              DateTime               @updatedAt @map("updated_at")
  password               String?                @map("password")
  role                   Role                   @relation(fields: [roleId], references: [id])
  userOtps               UserOtp[]
  userPlans              UserPlan[]             @relation("PatientPlans")
  bookingsAsDoctor       Booking[]              @relation("DoctorBookings")
  bookingsAsPatient      Booking[]              @relation("PatientBookings")
  transactions           Transaction[]
  doctorUnavailabilities DoctorUnavailability[]
  doctorProfile          DoctorProfile?
  chatSessionsAsPatient  ChatSession[]          @relation("ChatPatient")
  chatSessionsAsSupport  ChatSession[]          @relation("ChatSupport")

  @@map("users")
}

model DoctorProfile {
  id                 String   @id @default(uuid())
  doctorId           String   @unique
  audioConsultationCharge Decimal @map("audio_consultation_charge")
  videoConsultationCharge Decimal @map("video_consultation_charge")

  doctor User @relation(fields: [doctorId], references: [id])
@@map("doctor_profiles")
}

model Role {
  id        String   @id @default(uuid()) @map("id")
  name      String   @unique @map("name")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  users User[]

  @@map("roles")
}

model UserOtp {
  id        String   @id @default(uuid()) @map("id")
  userId    String   @map("user_id")
  otpSecret String   @map("otp_secret")
  createdAt DateTime @default(now()) @map("created_at")
  expiresAt DateTime @map("expires_at")

  user User @relation(fields: [userId], references: [id])

  @@map("user_otps")
}

model PlanPackage {
  id               String   @id @default(uuid()) @map("id")
  name             String   @map("name")
  bookingFrequency Int      @map("booking_frequency")
  timePeriod       Int      @map("time_period")
  amount           Decimal  @map("amount")
  isActive          Boolean   @default(true)  @map("is_active")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  userPlans    UserPlan[]
  transactions Transaction[] @relation("PlanTransactions")

  @@map("plan_packages")
}

model UserPlan {
  id              String    @id @default(uuid()) @map("id")
  patientId       String    @map("patient_id")
  packageId       String    @map("package_id")
  bookingsPending Int       @map("bookings_pending")
  startDate       DateTime  @map("start_date")
  endDate         DateTime? @map("end_date")
  isActive        Boolean   @map("is_active")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  patient  User        @relation("PatientPlans", fields: [patientId], references: [id])
  package  PlanPackage @relation(fields: [packageId], references: [id])
  bookings Booking[]

  @@map("user_plans")
}

model Transaction {
  id          String            @id @default(uuid()) @map("id")
  userId      String            @map("user_id")
  planId      String?           @unique @map("plan_id")
  bookingId   String?           @unique @map("booking_id")
  amount      Decimal           @map("amount")
  paymentType PaymentType       @map("payment_type")
  status      TransactionStatus @map("status")
  createdAt   DateTime          @default(now()) @map("created_at")

  user    User         @relation(fields: [userId], references: [id])
  booking Booking?     @relation(fields: [bookingId], references: [id])
  plan    PlanPackage? @relation("PlanTransactions", fields: [planId], references: [id])

  @@map("transactions")
}

model Booking {
  id              String        @id @default(uuid()) @map("id")
  doctorId        String        @map("doctor_id")
  patientId       String        @map("patient_id")
  userPlanId      String        @map("user_plan_id")
  scheduledAt     DateTime      @map("scheduled_at")
  durationMinutes Int           @map("duration_minutes")
  isPaid          Boolean       @map("is_paid")
  paymentType     PaymentType   @map("payment_type")
  type            SessionType   @map("type")
  status          BookingStatus @map("status")
  createdAt       DateTime      @default(now()) @map("created_at")

  doctor              User                 @relation("DoctorBookings", fields: [doctorId], references: [id])
  patient             User                 @relation("PatientBookings", fields: [patientId], references: [id])
  userPlan            UserPlan             @relation(fields: [userPlanId], references: [id])
  consultationSession ConsultationSession?
  transaction         Transaction?

  @@map("bookings")
}

model ConsultationSession {
  id          String            @id @default(uuid()) @map("id")
  bookingId   String            @unique @map("booking_id")
  date        DateTime          @map("date")
  status      SessionStatusEnum @map("status")
  startedAt   DateTime?         @map("started_at")
  endedAt     DateTime?         @map("ended_at")
  sessionType SessionType       @map("session_type")
  notes       String?           @map("notes")
  createdAt   DateTime          @default(now()) @map("created_at")

  booking Booking @relation(fields: [bookingId], references: [id])

  @@map("consultation_sessions")
}

model DoctorUnavailability {
  id        String   @id @default(uuid()) @map("id")
  doctorId  String   @map("doctor_id")
  date      DateTime @map("date")
  startTime DateTime @map("start_time")
  endTime   DateTime @map("end_time")
  reason    String   @map("reason")
  createdAt DateTime @default(now()) @map("created_at")

  doctor User @relation(fields: [doctorId], references: [id])

  @@map("doctor_unavailabalities")
}

model ChatSession {
  id           String   @id @default(uuid())
  patientId    String
  supportId    String?   
  startedAt    DateTime @default(now())
  endedAt      DateTime?
  status       SessionStatusEnum @default(pending)

  patient      User     @relation("ChatPatient", fields: [patientId], references: [id])
  support      User?    @relation("ChatSupport", fields: [supportId], references: [id])

  @@map("chat_sessions")
}
