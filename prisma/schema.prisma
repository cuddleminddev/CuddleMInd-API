// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enums
enum SessionType {
  audio
  video
}

enum PaymentType {
  one_time
  plan
}

enum BookingStatus {
  pending
  confirmed
  completed
  cancelled
  missed
}

enum TransactionStatus {
  pending
  success
  failed
}

enum SessionStatusEnum {
  pending
  ongoing
  canceled
  completed
}

enum UserStatus {
  active
  disabled
}

// Tables
model User {
  id                String           @id @default(uuid())
  name              String
  email             String           @unique
  phone             String?
  status            UserStatus          @default(active)
  roleId            String           @map("role_id")
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  password          String?
  role              Role             @relation(fields: [roleId], references: [id])
  userOtps          UserOtp[]
  userPlans         UserPlan[]       @relation("PatientPlans")
  bookingsAsDoctor  Booking[]        @relation("DoctorBookings")
  bookingsAsPatient Booking[]        @relation("PatientBookings")
  transactions      Transaction[]
  doctorUnavailabilities DoctorUnavailability[]
  chatSessionsAsPatient   ChatSession[] @relation("ChatPatient")
  chatSessionsAsSupport   ChatSession[] @relation("ChatSupport")

    @@map("users")
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique // 'doctor', 'patient', 'admin', 'chat_support'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       User[]

  @@map("roles")
}

model UserOtp {
  id         String   @id @default(uuid())
  userId     String
  otpSecret  String
  createdAt  DateTime @default(now())
  expiresAt  DateTime

  user       User     @relation(fields: [userId], references: [id])

    @@map("user_otps")
}

model PlanPackage {
  id                String    @id @default(uuid())
  name              String
  bookingFrequency  Int       // consultations allowed in a period
  timePeriod        Int       // in days (e.g., 30 = monthly)
  amount            Decimal
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  userPlans         UserPlan[]
  transactions      Transaction[] @relation("PlanTransactions")

    @@map("plan_packages")
}

model UserPlan {
  id               String     @id @default(uuid())
  patientId        String
  packageId        String
  bookingsPending  Int
  startDate        DateTime
  endDate          DateTime?
  isActive         Boolean
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  patient          User       @relation("PatientPlans", fields: [patientId], references: [id])
  package          PlanPackage @relation(fields: [packageId], references: [id])
  bookings         Booking[]

    @@map("user_plans")
}

model Transaction {
  id           String           @id @default(uuid())
  userId       String
  planId       String?          @unique
  bookingId    String?          @unique
  amount       Decimal
  paymentType  PaymentType
  status       TransactionStatus
  createdAt    DateTime @default(now())

  user         User       @relation(fields: [userId], references: [id])
  booking      Booking?   @relation(fields: [bookingId], references: [id])
  plan         PlanPackage? @relation("PlanTransactions", fields: [planId], references: [id])

    @@map("transactions")
}

model Booking {
  id               String        @id @default(uuid())
  doctorId         String
  patientId        String
  userPlanId       String
  scheduledAt      DateTime
  durationMinutes  Int
  isPaid           Boolean
  paymentType      PaymentType
  type             SessionType
  status           BookingStatus
  createdAt        DateTime     @default(now())

  doctor           User          @relation("DoctorBookings", fields: [doctorId], references: [id])
  patient          User          @relation("PatientBookings", fields: [patientId], references: [id])
  userPlan         UserPlan      @relation(fields: [userPlanId], references: [id])
  consultationSession ConsultationSession?
  transaction      Transaction?

    @@map("bookings")
}

model ConsultationSession {
  id           String           @id @default(uuid())
  bookingId    String           @unique
  date         DateTime
  status       SessionStatusEnum
  startedAt    DateTime?
  endedAt      DateTime?
  sessionType  SessionType
  notes        String?
  createdAt    DateTime @default(now())

  booking      Booking    @relation(fields: [bookingId], references: [id])

    @@map("consultation_sessions")
}

model DoctorUnavailability {
  id         String   @id @default(uuid())
  doctorId   String
  date       DateTime
  startTime  DateTime
  endTime    DateTime
  reason     String
  createdAt  DateTime @default(now())

  doctor     User     @relation(fields: [doctorId], references: [id])

    @@map("doctor_unavailabalities")
}

model ChatSession {
  id              String   @id @default(uuid())
  patientId       String
  supportDoctorId String
  startedAt       DateTime @default(now())
  endedAt         DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  patient         User     @relation("ChatPatient", fields: [patientId], references: [id])
  supportDoctor   User     @relation("ChatSupport", fields: [supportDoctorId], references: [id])

    @@map("chat_sessions")
}