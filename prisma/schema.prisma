// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// enums
enum SessionType {
  audio
  video
}

enum PaymentType {
  one_time
  plan
}

enum BookingStatus {
  pending
  confirmed
  completed
  cancelled
  missed
}

enum TransactionStatus {
  pending
  success
  failed
}

enum SessionStatusEnum {
  pending
  ongoing
  canceled
  completed
}

enum UserStatus{
  active
  disabled
  online
}

// models
model User {
  id         String    @id @default(uuid()) @map("id")
  name       String
  email      String    @unique
  phone      String
  status     UserStatus  @default(active)
  roleId     String    @map("role_id")
  role       Role      @relation(fields: [roleId], references: [id])
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  bookingsAsDoctor Booking[] @relation("DoctorBookings")
  bookingsAsPatient Booking[] @relation("PatientBookings")
  userPlans        UserPlan[]
  transactions     Transaction[]
  otps             UserOtp[]
  doctorUnavailabilities DoctorUnavailability[]

  @@map("users")
}

model Role {
  id        String   @id @default(uuid()) @map("id")
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  users     User[]

  @@map("roles")
}

model UserOtp {
  id         String   @id @default(uuid()) @map("id")
  userId     String   @map("user_id")
  user       User     @relation(fields: [userId], references: [id])
  otpSecret  String   @map("otp_secret")
  createdAt  DateTime @default(now()) @map("created_at")
  expiresAt  DateTime @map("expires_at")

  @@map("user_otps")
}

model PlanPackage {
  id                 String    @id @default(uuid()) @map("id")
  name              String
  bookingFrequency  Int       @map("booking_frequency")
  timePeriod        Int       @map("time_period")
  amount            Decimal   @db.Decimal(10, 2)
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  transactions      Transaction[]
  userPlans         UserPlan[]

  @@map("plan_packages")
}

model UserPlan {
  id               String    @id @default(uuid()) @map("id")
  patientId        String    @map("patient_id")
  patient          User      @relation(fields: [patientId], references: [id])
  packageId        String    @map("package_id")
  package          PlanPackage @relation(fields: [packageId], references: [id])
  bookingsPending  Int       @map("bookings_pending")
  startDate        DateTime  @map("start_date")
  endDate          DateTime  @map("end_date")
  isActive         Boolean   @map("is_active")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  bookings         Booking[]

  @@map("user_plans")
}

model Transaction {
  id             String           @id @default(uuid()) @map("id")
  userId         String           @map("user_id")
  user           User             @relation(fields: [userId], references: [id])
  planPackageId  String?          @map("plan_package_id")
  planPackage    PlanPackage?     @relation(fields: [planPackageId], references: [id])
  bookingId      String?          @map("booking_id")
  booking        Booking?         @relation(fields: [bookingId], references: [id])
  amount         Decimal          @db.Decimal(10, 2)
  paymentType    PaymentType      @map("payment_type")
  status         TransactionStatus
  createdAt      DateTime         @default(now()) @map("created_at")

  @@map("transactions")
}

model Booking {
  id              String         @id @default(uuid()) @map("id")
  doctorId        String         @map("doctor_id")
  doctor          User           @relation("DoctorBookings", fields: [doctorId], references: [id])
  patientId       String         @map("patient_id")
  patient         User           @relation("PatientBookings", fields: [patientId], references: [id])
  userPlanId      String?        @map("user_plan_id")
  userPlan        UserPlan?      @relation(fields: [userPlanId], references: [id])
  scheduledAt     DateTime       @map("scheduled_at")
  durationMinutes Int            @map("duration_minutes")
  isPaid          Boolean        @map("is_paid")
  paymentType     PaymentType    @map("payment_type")
  type            SessionType
  status          BookingStatus
  createdAt       DateTime       @default(now()) @map("created_at")

  sessions        ConsultationSession[]
  transaction     Transaction[]

  @@map("bookings")
}

model ConsultationSession {
  id           String            @id @default(uuid()) @map("id")
  bookingId    String            @map("booking_id")
  booking      Booking           @relation(fields: [bookingId], references: [id])
  date         DateTime
  status       SessionStatusEnum
  startedAt    DateTime?         @map("started_at")
  endedAt      DateTime?         @map("ended_at")
  sessionType  SessionType       @map("session_type")
  notes        String?
  createdAt    DateTime          @default(now()) @map("created_at")
  updatedAt    DateTime          @updatedAt @map("updated_at")

  @@map("consultation_session")
}

model DoctorUnavailability {
  id         String   @id @default(uuid()) @map("id")
  doctorId   String   @map("doctor_id")
  doctor     User     @relation(fields: [doctorId], references: [id])
  date       DateTime
  startTime  DateTime @map("start_time")
  endTime    DateTime @map("end_time")
  reason     String?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("doctor_unavailabalities")
}